---
- name: GIT | Include distribution specific variables
  ansible.builtin.include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files:
        - "{{ ansible_facts.distribution }}-{{ ansible_facts.distribution_version }}.yml"
        - "{{ ansible_facts.os_family }}-{{ ansible_facts.distribution_major_version }}.yml"
        - "{{ ansible_facts.distribution }}.yml"
        - "{{ ansible_facts.os_family }}.yml"
        - default.yml
      paths:
        - vars
  tags:
    - git

- name: GIT | Ensure git's dependencies are installed.
  ansible.builtin.package:
    name: "{{ git_install_from_source_dependencies }}"
    state: present

- name: GIT | Get installed version.
  ansible.builtin.command: >
    git --version
    warn=no
  changed_when: false
  failed_when: false
  check_mode: false
  register: git_installed_version

- name: GIT | Force git install if the version numbers do not match.
  ansible.builtin.set_fact:
    git_reinstall_from_source: true
  when:
    - git_install_from_source_force_update | bool
    - (git_installed_version.rc == 0) and (git_installed_version.stdout | regex_replace("^.*?([0-9\.]+)$", "\\1") is version(git_version, operator="!="))

- name: GIT | Download git.
  ansible.builtin.get_url:
    url: "https://www.kernel.org/pub/software/scm/git/git-{{ git_version }}.tar.gz"
    dest: "{{ workspace }}/git-{{ git_version }}.tar.gz"
  when: (git_installed_version.rc != 0) or (git_reinstall_from_source | bool)

- name: GIT | Expand git archive.
  ansible.builtin.unarchive:
    src: "{{ workspace }}/git-{{ git_version }}.tar.gz"
    dest: "{{ workspace }}"
    creates: "{{ workspace }}/git-{{ git_version }}/README"
    copy: false
  when: (git_installed_version.rc != 0) or (git_reinstall_from_source | bool)

- name: GIT | Build git.
  community.general.make:
    chdir: "{{ workspace }}/git-{{ git_version }}"
    target: "{{ item }}"
    params:
      prefix: "{{ git_install_path }}"
  loop:
    - all
    - install
  when: (git_installed_version.rc != 0) or (git_reinstall_from_source | bool)
  become: true
