---
- name: GIT | Include distribution specific variables
  ansible.builtin.include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files:
        - "{{ ansible_facts.distribution }}-{{ ansible_facts.distribution_version }}.yml"
        - "{{ ansible_facts.os_family }}-{{ ansible_facts.distribution_major_version }}.yml"
        - "{{ ansible_facts.distribution }}.yml"
        - "{{ ansible_facts.os_family }}.yml"
        - default.yml
      paths:
        - vars
  tags:
    - always

- name: GIT | Get installed version.
  ansible.builtin.shell: >
    which git && git --version | grep -o '\([0-9\.]*\)'
  failed_when: false
  check_mode: false
  register: git_current_version
  changed_when: (git_current_version.rc != 0) or (git_current_version.stdout_lines[1] is version(git_version, '<'))

- name: GIT | Remove the GIT current package and upgrade
  ansible.builtin.package:
    name: git
    state: absent
  become: true
  register: git_current_remove
  when:
    - git_current_version.rc == 0
    - (git_current_version.stdout_lines[1] is undefined) or (git_current_version.stdout_lines[1] is version(git_version, '<'))

- name: GIT | Ensure git's dependencies are installed.
  ansible.builtin.package:
    name: "{{ git_install_from_source_dependencies }}"
    state: present
  when: git_current_remove.changed | bool # noqa: no-handler

- name: GIT | Force git install if the version numbers do not match.
  ansible.builtin.set_fact:
    git_reinstall_from_source: true
  when:
    - git_current_remove.changed | bool
    - git_install_from_source_force_update | bool

- name: GIT | Build temp build directory
  ansible.builtin.tempfile:
    state: directory
    suffix: build
  register: tempfile_build
  when:
    - git_current_remove.changed | bool
    - git_reinstall_from_source | bool

- name: GIT | Download git from source
  ansible.builtin.get_url:
    url: "https://www.kernel.org/pub/software/scm/git/git-{{ git_version }}.tar.gz"
    dest: "{{ tempfile_build.path }}/git-{{ git_version }}.tar.gz"
    mode: "0644"
  when:
    - git_current_remove.changed | bool
    - git_reinstall_from_source | bool

- name: GIT | Unarchive a file that needs to be install.
  ansible.builtin.unarchive:
    src: "{{ tempfile_build.path }}/git-{{ git_version }}.tar.gz"
    dest: "{{ tempfile_build.path }}"
    creates: "{{ tempfile_build.path }}/git-{{ git_version }}/README"
    copy: false
    mode: "0755"
  when:
    - git_current_remove.changed | bool
    - git_reinstall_from_source | bool

- name: GIT | Build git from source
  ansible.builtin.command: >
    make prefix={{ git_install_path }} {{ item }}
    chdir={{ tempfile_build.path }}/git-{{ git_version }}
  loop:
    - all
    - install
  become: true
  register: git_installed
  changed_when: git_installed.rc != 0
  when: git_reinstall_from_source | bool # noqa: no-handler

- name: GIT | Cleanup (delete files) the temporary file
  ansible.builtin.file:
    path: "{{ tempfile_build.path }}"
    state: absent
    force: true
  failed_when: false
  no_log: true
  when: tempfile_build.path is defined # noqa: no-handler
